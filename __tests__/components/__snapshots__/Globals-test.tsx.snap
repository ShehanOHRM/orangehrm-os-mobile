// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Globals test Globals component 1`] = `
Array [
  <View
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      }
    }
  >
    <Modal
      animationType="fade"
      hardwareAccelerated={false}
      statusBarTranslucent={true}
      transparent={true}
      visible={false}
    >
      <View
        style={
          Object {
            "backgroundColor": "transparent",
            "bottom": 0,
            "flex": 1,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "rgba(0, 0, 0, 0.25)",
              "bottom": 0,
              "justifyContent": "center",
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <ActivityIndicator
            animating={true}
            color="#f88400"
            hidesWhenStopped={true}
            size="large"
          />
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "bottom": 0,
                  "flex": 1,
                  "justifyContent": "center",
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
          />
        </View>
      </View>
    </Modal>
  </View>,
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={true}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection={
      Array [
        "left",
        "right",
        "down",
      ]
    }
    swipeThreshold={50}
    transparent={true}
    visible={false}
  >
    <View
      forwardedRef={[Function]}
      hideModalContentWhileAnimating={true}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onSwipeComplete={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "left": 0,
          "margin": 37.5,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection={
        Array [
          "left",
          "right",
          "down",
        ]
      }
      swipeThreshold={50}
    >
      <View
        onLayout={[Function]}
        style={
          Object {
            "paddingBottom": 0,
          }
        }
      >
        <RCTSafeAreaView
          emulateUnlessSupported={true}
        >
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "#ffffff",
                  "borderRadius": 4,
                },
                undefined,
              ]
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "flexDirection": "row",
                    },
                    Object {
                      "padding": 16,
                    },
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "paddingLeft": 12,
                      "paddingRight": 20,
                      "paddingTop": 2,
                    }
                  }
                >
                  <Text
                    style={
                      Array [
                        Object {
                          "color": "#818181",
                        },
                        undefined,
                        Object {
                          "color": "#ffffff",
                        },
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </RCTSafeAreaView>
      </View>
    </View>
  </Modal>,
]
`;
